// <auto-generated />
using System;
using FinalProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230308152633_fixRelationshipToSuperhero")]
    partial class fixRelationshipToSuperhero
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DependentSuperhero", b =>
                {
                    b.Property<int>("DependentsId")
                        .HasColumnType("int");

                    b.Property<int>("SuperheroId")
                        .HasColumnType("int");

                    b.HasKey("DependentsId", "SuperheroId");

                    b.HasIndex("SuperheroId");

                    b.ToTable("DependentSuperhero");
                });

            modelBuilder.Entity("FinalProject.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Insignia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sacramento",
                            Country = "USA",
                            Name = "Federal Bureau of Inadequate Superheroes",
                            PostalCode = "94203",
                            StateOrProvince = "California",
                            StreetAddress = "381 Macaroni St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Danville",
                            Country = "USA",
                            Name = "Organization Without a Cool Acronym",
                            PostalCode = "90095",
                            StateOrProvince = "Tri-State Area",
                            StreetAddress = "104 Summer Ave"
                        },
                        new
                        {
                            Id = 3,
                            City = "Santa Barbara",
                            Country = "USA",
                            Name = "Santa Barbara Police Department",
                            PostalCode = "93101",
                            StateOrProvince = "California",
                            StreetAddress = "215 EnFigueroa St"
                        },
                        new
                        {
                            Id = 4,
                            City = "Hanalei",
                            Country = "USA",
                            Name = "Galactic Federation",
                            PostalCode = "96714",
                            StateOrProvince = "Hawaii",
                            StreetAddress = "2002 Lilo Way"
                        },
                        new
                        {
                            Id = 5,
                            City = "Langley",
                            Country = "USA",
                            Name = "Clearly Ineffective Abilities",
                            PostalCode = "23454",
                            StateOrProvince = "Virginia",
                            StreetAddress = "1000 Colonial Farm Road"
                        },
                        new
                        {
                            Id = 6,
                            City = "Washington",
                            Country = "USA",
                            Name = "Unfortunate Superpowers Performance Service",
                            PostalCode = "20260",
                            StateOrProvince = "D.C.",
                            StreetAddress = "475 L'Enfant Plaza SW"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Dependent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RelationshipToSuperhero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("FinalProject.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DependentId")
                        .HasColumnType("int");

                    b.Property<int>("SuperheroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DependentId");

                    b.HasIndex("SuperheroId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("FinalProject.Models.Superhero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SuperheroName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuperheroStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("SuperheroStatusId");

                    b.ToTable("Superheroes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abilities = "Uncontrollable aging, both forwards and backwards.",
                            AgencyId = 2,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(2003, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "BenjaminButtoning1@gmail.com",
                            FirstName = "Jack",
                            LastName = "Son",
                            Nationality = "American",
                            Notes = "Symptoms are exasperated by synchronous diaphragmatic flutter (hiccupping)",
                            Phone = "2068893720",
                            PostalCode = "98057",
                            RegistrationDate = new DateTime(2018, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "OWCA37209092",
                            StateOrProvince = "Washington",
                            StreetAddress = "9092 Minecraft Blvd.",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Abilities = "Laser vision.",
                            AgencyId = 6,
                            City = "Crocker",
                            Country = "USA",
                            DateOfBirth = new DateTime(1998, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Nedward@gmail.com",
                            FirstName = "Ned",
                            LastName = "Ward",
                            Nationality = "American",
                            Notes = "Low power.  Takes 4 minutes to toast one side of a slice of bread.",
                            Phone = "4253334567",
                            PostalCode = "35004",
                            RegistrationDate = new DateTime(2008, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS45675435",
                            StateOrProvince = "Alabama",
                            StreetAddress = "5435 Pillsbury Blvd.",
                            SuperheroName = "Toaster Dude-le",
                            SuperheroStatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            Abilities = "Can turn any bread food item into a waffle by singing it a song.\r\nCries tears of maple syrup.",
                            AgencyId = 4,
                            City = "Kihei",
                            Country = "USA",
                            DateOfBirth = new DateTime(1988, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeggoMyGreggo@gmail.com",
                            FirstName = "Greg",
                            LastName = "Porter",
                            Nationality = "Canadian",
                            Notes = "Known waffle flavors: Chocolate chip, banana, cinnamon sugar, pumpkin, and blueberry.  \nTears are  genuine maple syrup.",
                            Phone = "4355772765",
                            PostalCode = "96272",
                            RegistrationDate = new DateTime(2005, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "GFHI27653728",
                            StateOrProvince = "Hawaii",
                            StreetAddress = "3728 Aulani Dr.",
                            SuperheroName = "Gr-Eggo",
                            SuperheroStatusId = 3
                        },
                        new
                        {
                            Id = 4,
                            Abilities = "Telekinetically moves shopping carts.",
                            AgencyId = 6,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(1994, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Hannah@gmail.com",
                            FirstName = "Hannah",
                            LastName = "Angel",
                            Nationality = "American",
                            Notes = "Known member of the NW Shopping Cart Racing Ring.",
                            Phone = "4259765436",
                            PostalCode = "98056",
                            RegistrationDate = new DateTime(2015, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS283927348",
                            StateOrProvince = "Washington",
                            StreetAddress = "666 Fire St. Apt. 212",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Abilities = "Generates energy and healing capabilities by consuming food that's fallen on the floor.",
                            AgencyId = 6,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(1997, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DylanBrotato@gmail.com",
                            FirstName = "Dylan",
                            LastName = "Register",
                            Nationality = "American",
                            Notes = "Frequently finds chicken on the floor in unexpected places.",
                            Phone = "2063436546",
                            PostalCode = "98056",
                            RegistrationDate = new DateTime(2015, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS393943A8",
                            StateOrProvince = "Washington",
                            StreetAddress = "666 Fire St. Apt. 213",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Abilities = "Can communicate with raccoons, squirrels, and crows.",
                            AgencyId = 6,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(1997, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Kristyn2@gmail.com",
                            FirstName = "Kristyn",
                            LastName = "Taniguchi",
                            Nationality = "American",
                            Notes = "Has trained them to annoy her enemies.",
                            Phone = "2064440875",
                            PostalCode = "98056",
                            RegistrationDate = new DateTime(2015, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS54546568",
                            StateOrProvince = "Washington",
                            StreetAddress = "666 Fire St. Apt. 214",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Abilities = "Hair changes color based on their mood.",
                            AgencyId = 6,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(1983, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "WillCramComputerScienceMan@gmail.com",
                            FirstName = "Will",
                            LastName = "Cram",
                            Nationality = "American",
                            Notes = "He is bald.",
                            Phone = "4257668765",
                            PostalCode = "98056",
                            RegistrationDate = new DateTime(2015, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS84293JH",
                            StateOrProvince = "Washington",
                            StreetAddress = "666 Fire St. Apt. 215",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            Abilities = "Night vision.",
                            AgencyId = 6,
                            City = "Renton",
                            Country = "USA",
                            DateOfBirth = new DateTime(1986, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Josh9@gmail.com",
                            FirstName = "Josh",
                            LastName = "Emery",
                            Nationality = "American",
                            Notes = "Must wear prescription sunglasses to see during the day.",
                            Phone = "4252223029",
                            PostalCode = "98056",
                            RegistrationDate = new DateTime(2015, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "USPS8393474JJ",
                            StateOrProvince = "Washington",
                            StreetAddress = "666 Fire St. Apt. 216",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            Abilities = "Exhales helium. \nExtremely large lung capacity.",
                            AgencyId = 5,
                            City = "Halifax",
                            Country = "Canada",
                            DateOfBirth = new DateTime(1983, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "BaileysBalloon@gmail.com",
                            FirstName = "Bailey",
                            LastName = "Mylar",
                            Nationality = "Canadian",
                            Notes = "The sound of her voice is always affected by helium. \nMakes balloon arches for pet adoption events. \nHas not been seen since The Great Hot Air Balloon Accident of 2018.",
                            Phone = "3422326546",
                            PostalCode = "B0N 1Y0",
                            RegistrationDate = new DateTime(2012, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "CIA7439USX",
                            StateOrProvince = "Nova Scotia",
                            StreetAddress = "839 Abbey Rd.",
                            SuperheroName = "Bailoony",
                            SuperheroStatusId = 2
                        },
                        new
                        {
                            Id = 10,
                            Abilities = "Can tell someone's birthday based off their \"vibe\".",
                            AgencyId = 1,
                            City = "Newport Beach",
                            Country = "USA",
                            DateOfBirth = new DateTime(1999, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Haleyscope@gmail.com",
                            FirstName = "Haley",
                            LastName = "Girardi",
                            Nationality = "American",
                            Notes = "Big fan of astrology.  \nTerminated for refusing to work with Libras.",
                            Phone = "9758431028",
                            PostalCode = "92660",
                            RegistrationDate = new DateTime(2017, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "FBIS02938KBT",
                            StateOrProvince = "California",
                            StreetAddress = "1111 Aquarius Way",
                            SuperheroName = "N/A",
                            SuperheroStatusId = 3
                        },
                        new
                        {
                            Id = 11,
                            Abilities = "Causes decomposing materials to combust whenever he wins Rock, Paper, Scissors.",
                            AgencyId = 3,
                            City = "Eugene",
                            Country = "USA",
                            DateOfBirth = new DateTime(1992, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Jimardson@gmail.com",
                            FirstName = "Jimmy",
                            LastName = "Richardson",
                            Nationality = "American",
                            Notes = "Has a history of accidental arson. \nSpent 7 months on the FBI's Most Wanted list for starting a fire on an airplane midflight.",
                            Phone = "4324590914",
                            PostalCode = "97408",
                            RegistrationDate = new DateTime(2014, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "SBPD83947UWT",
                            StateOrProvince = "Oregon",
                            StreetAddress = "1091 Sandwich Rd.",
                            SuperheroName = "Dumpster Fire",
                            SuperheroStatusId = 2
                        },
                        new
                        {
                            Id = 12,
                            Abilities = "Finger scissors are actual working scissors.",
                            AgencyId = 4,
                            City = "Denver",
                            Country = "USA",
                            DateOfBirth = new DateTime(1992, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "racecarracecar@gmail.com",
                            FirstName = "Levi",
                            LastName = "Ivel",
                            Nationality = "Canadian",
                            Notes = "Cause of death was due to him unintentionally severing his cable while bungee jumping.",
                            Phone = "7289283341",
                            PostalCode = "80204",
                            RegistrationDate = new DateTime(2014, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "GFHI92GG7P0",
                            StateOrProvince = "Colorado",
                            StreetAddress = "222 Skyview Ave.",
                            SuperheroName = "",
                            SuperheroStatusId = 4
                        },
                        new
                        {
                            Id = 13,
                            Abilities = "Can taste the pH level of substances.",
                            AgencyId = 5,
                            City = "Denver",
                            Country = "USA",
                            DateOfBirth = new DateTime(1986, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pHoShizzle@gmail.com",
                            FirstName = "Tony",
                            LastName = "Dunn",
                            Nationality = "British",
                            Notes = "Cause of death was poisoning due to ingesting a multitude of toxic chemicals while testing their pH level.  No foul play suspected.",
                            Phone = "7355520755",
                            PostalCode = "80210",
                            RegistrationDate = new DateTime(2006, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationId = "HELP73834ME7",
                            StateOrProvince = "Colorado",
                            StreetAddress = "92038 Substrate St.",
                            SuperheroName = "pH Taster",
                            SuperheroStatusId = 4
                        });
                });

            modelBuilder.Entity("FinalProject.Models.SuperheroStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SuperheroStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusTitle = "Active"
                        },
                        new
                        {
                            Id = 2,
                            StatusTitle = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            StatusTitle = "Terminated"
                        },
                        new
                        {
                            Id = 4,
                            StatusTitle = "Deceased"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DependentSuperhero", b =>
                {
                    b.HasOne("FinalProject.Models.Dependent", null)
                        .WithMany()
                        .HasForeignKey("DependentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.Superhero", null)
                        .WithMany()
                        .HasForeignKey("SuperheroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.Models.Relationship", b =>
                {
                    b.HasOne("FinalProject.Models.Dependent", "Dependent")
                        .WithMany("Relationships")
                        .HasForeignKey("DependentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.Superhero", "Superhero")
                        .WithMany("Relationships")
                        .HasForeignKey("SuperheroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependent");

                    b.Navigation("Superhero");
                });

            modelBuilder.Entity("FinalProject.Models.Superhero", b =>
                {
                    b.HasOne("FinalProject.Models.Agency", "Agency")
                        .WithMany("Superhero")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.SuperheroStatus", null)
                        .WithMany("Superheroes")
                        .HasForeignKey("SuperheroStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.Models.Agency", b =>
                {
                    b.Navigation("Superhero");
                });

            modelBuilder.Entity("FinalProject.Models.Dependent", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("FinalProject.Models.Superhero", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("FinalProject.Models.SuperheroStatus", b =>
                {
                    b.Navigation("Superheroes");
                });
#pragma warning restore 612, 618
        }
    }
}
